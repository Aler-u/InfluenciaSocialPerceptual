)
heatmap(
matrix(
c(rep(TRUE,90), rep(FALSE,10)),
10,
10
),
col = c('red','blue')
)
heatmap(
matrix(
c(rep(0,90), rep(1,10)),
10,
10
),
col = c('red','blue')
)
heatmap(
matrix(
c(rep(1,90), rep(0,10)),
10,
10
),
col = c('red','blue')
)
heatmap(
matrix(c(1,0,1
0,1,0
1,0,1)
),
col = c('red','blue')
)
heatmap(
matrix(c(1,0,1
0,1,0
1,0,1)
),
col = c('red','blue')
)
heatmap(
matrix(
c(1,0,1,
0,1,0,
1,0,1)
),
col = c('red','blue')
)
c(1,0,1,
0,1,0,
1,0,1)
heatmap(
matrix(
c(1,0,1,
0,1,0,
1,0,1),
3,3
),
col = c('red','blue')
)
heatmap(
matrix(
c(1,0,1,
0,1,0,
1,0,1),
3,3
),
Rowv = NA, Colv = NA,
col = c('red','blue')
)
heatmap(
matrix(
c(0,0,1,
0,1,0,
1,0,1),
3,3
),
Rowv = NA, Colv = NA,
col = c('red','blue')
)
heatmap(
matrix(
c(1,0,1,
0,1,0,
1,0,1),
3,3
),
Rowv = NA, Colv = NA,
col = c('red','blue')
)
runApp('app_v2.R')
heatmap(
matrix(
c(1,0,1,
0,1,0,
1,0,1),
3,3
),
Rowv = NA, Colv = NA,
col = c('red',NULL)
)
heatmap(
matrix(
c(1,0,1,
0,1,0,
1,0,1),
3,3
),
Rowv = NA, Colv = NA,
col = c('red',TRUE)
)
heatmap(
matrix(
c(1,0,1,
0,1,0,
1,0,1),
3,3
),
Rowv = NA, Colv = NA,
col = c('red','blue')
)
heatmap(
matrix(
c(1,0,1,
0,1,0,
1,0,1),
3,3
),
Rowv = NA, Colv = NA,
col = c('orange','blue')
)
heatmap(
matrix(
c(1,0,1,
0,1,0,
1,0,1),
3,3
),
Rowv = NA, Colv = NA,
col = c('red','blue')
)
heatmap(
matrix(
c(0,0,1,
0,1,0,
1,0,1),
3,3
),
Rowv = NA, Colv = NA,
col = c('red','blue')
)
heatmap(
matrix(
c(1,0,1,
0,1,0,
1,0,1),
3,3
),
Rowv = NA, Colv = NA,
col = c('red','blue')
)
runApp('app_v2.R')
runApp('app_v2.R')
runApp('app_v2.R')
sample(c('orange','blue'), ntr * 3, replace = TRUE)
?data.frame
runApp('app_v2.R')
source('~/Documents/Projects/Doctorado/Tareas/app_propia/stimulus_construction.R')
runApp('app_v2.R')
runApp('app_v2.R')
runApp('app_v2.R')
runApp('app_v2.R')
runApp('app_v2.R')
View(trngPage)
runApp('app_v2.R')
runApp('app_v2.R')
runApp('app_v2.R')
?withProgress
runApp('app_v2.R')
runApp('app_v2.R')
runApp('app_v2.R')
runApp('app_v2.R')
runApp('app_v2.R')
runApp('app_v2.R')
?saveData\
saveData
?saveData
?saveData()
saveData
runApp('app_v2.R')
runApp('app_v2.R')
length('aaaa')
?write.table
runApp('app_v2.R')
runApp('app_v2.R')
runApp('app_v2.R')
runApp('app_v2.R')
runApp('app_v2.R')
runApp('app_v2.R')
# load experimental and training stimulus
# training stimulus consists of a 3d array with dimensions 100x100xN where the 3rd dimensions (N) corresponds to the number of training trials
# experimental stimulus consists of a named list, each element representing a different proportion of 0s and 1s (see stimulus_construcion.R for details)
stimulus_data <-  readRDS('stimulus2.rda')
# Load pkgs, fns and num lists ====================================================
library(shiny);library(shinyjs);library(shinyWidgets)
# source pipeline and page layout fns
source("helper_fns_v2.R"); source("page_fns_v2.R")
# load experimental and training stimulus
# training stimulus consists of a 3d array with dimensions 100x100xN where the 3rd dimensions (N) corresponds to the number of training trials
# experimental stimulus consists of a named list, each element representing a different proportion of 0s and 1s (see stimulus_construcion.R for details)
stimulus_data <-  readRDS('stimulus2.rda')
getwd()
# load experimental and training stimulus
# training stimulus consists of a 3d array with dimensions 100x100xN where the 3rd dimensions (N) corresponds to the number of training trials
# experimental stimulus consists of a named list, each element representing a different proportion of 0s and 1s (see stimulus_construcion.R for details)
stimulus_data <-  readRDS('stimulus2.rda')
source('~/Documents/Projects/Doctorado/Tareas/app_propia/stimulus_construction.R')
#Save the results
save(training_stimuli, experimental_array, file = 'stimulus2.rda')
#Save the results
saveRDS(training_stimuli, experimental_array, file = 'stimulus2.rda')
#Save the results
saveRDS(training_stimuli,  file = 'training_stimulus.rds')
saveRDS(experimental_array, file = 'experimental_stimulus.rds')
# load experimental and training stimulus
# training stimulus consists of a 3d array with dimensions 100x100xN where the 3rd dimensions (N) corresponds to the number of training trials
# experimental stimulus consists of a named list, each element representing a different proportion of 0s and 1s (see stimulus_construcion.R for details)
training_stimuli <-  readRDS('training_stimulus.rds')
experimental_array <- readRDS('experimental_stimulus.rds')
source('~/Documents/Projects/Doctorado/Tareas/app_propia/stimulus_construction.R')
#Save the results
saveRDS(training_stimuli,  file = 'training_stimulus.rds', version = 2)
saveRDS(experimental_array, file = 'experimental_stimulus.rds', version = 2)
shiny::runApp()
runApp()
shiny::runApp()
runApp('~/Documents/Projects/Doctorado/Tareas/working_app/app_v2.R')
runApp()
shiny::runApp()
View(saveData)
paste0(getwd(),"/data/")
shiny::runApp()
View(saveData)
runApp()
?withProgress
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
?file.path
runApp()
?write.table()
write.table(matrix(rep(1,25), 5, 5), file = '/home/ale/Documents/Projects/Doctorado/Tareas/app_propia/data/sessions/1644944984.4689lbz_1644945009_s.csv')
matrix(rep(1,25), 5, 5)
write.table(matrix(rep(1,25), 5, 5),
file = '/home/ale/Documents/Projects/Doctorado/Tareas/app_propia/data/sessions/1644944984.4689lbz_1644945009_s.csv')
dir.exists('/home/ale/Documents/Projects/Doctorado/Tareas/app_propia/data/sessions')
dir.exists('/home/ale/Documents/Projects/Doctorado/Tareas/app_propia/data/sessions/')
dir.exists('~/ale/Documents/Projects/Doctorado/Tareas/app_propia/data/sessions/')
dir.exists('Documents/Projects/Doctorado/Tareas/app/data/sessions')
dir.exists('~/Documents/Projects/Doctorado/Tareas/app/data/sessions')
getwd()
dir.exists('/home/ale/Documents/Projects/Doctorado/Tareas/app_propia/data/sessions/')
dir.exists('./home/ale/Documents/Projects/Doctorado/Tareas/app_propia/data/sessions/')
dir.exists('/home/ale/Documents/Projects/Doctorado/Tareas/app_propia/data/sessions/')
dir.exists(getwd())
getwd()
paste0(getwd(),'/data/sessions')
dir.exists(paste0(getwd(),'/data/sessions'))
dir.exists(paste0(getwd()))
dir.exists(paste0(getwd(), '/data'))
runApp()
runApp()
runApp()
runApp()
30*5
30*5/2
rnorm(1,75,30)
rnorm(1,75,30)
rnorm(1,75,30)
rnorm(1,75,30)
rnorm(1,75,30)
rnorm(1,75,30)
rnorm(1,75,30)
rnorm(1,75,30)
rnorm(1,75,30)
rnorm(1,75,30)
runApp()
ntr*p_levels/2
30*5/2
30/2
rnorm(75, 30)
rnorm(100, 75, 30)
rnorm(100, 75, 15)
#Colors proportions based on Voss, A., Rothermund, K., & Brandtstädter, J. (2008).
#The paper proposes 3 color proportions (45%, 47% and 49%), we add two more levels
p <- round(seq(.45,.499, length.out =5), 3)
p
#Colors proportions based on Voss, A., Rothermund, K., & Brandtstädter, J. (2008).
#The paper proposes 3 color proportions (45%, 47% and 49%), we add two more levels
p <- round(seq(.45,.499, length.out =5), 3)
100^2 * p
#Colors proportions based on Voss, A., Rothermund, K., & Brandtstädter, J. (2008).
#The paper proposes 3 color proportions (45%, 47% and 49%), we add two more levels
p <- round(seq(.45,.495, length.out =5), 3)
100^2 * p
rep(
c(1,0),
c(4610, 10000 - 4610)
)
length(
rep(
c(1,0),
c(4610, 10000 - 4610)
)
)
length(
rep(
c(1,0),
c(
(100^2)*p[2],
(100^2)*(1-p[2])
)
)
)
p[2]
c(
(100^2)*p[2],
(100^2)*(1-p[2])
)
sum(c(
(100^2)*p[2],
(100^2)*(1-p[2])
))
length(
rep(
c(1,0),
spam
)
)
spam <- c(
(100^2)*p[2],
(100^2)*(1-p[2])
)
length(
rep(
c(1,0),
spam
)
)
spam <- c(
(100^2)*(1-p[2])
(100^2)*p[2]
)
length(
rep(
c(1,0),
spam
)
)
spam <- c(
(100^2)*(1-p[2]),
(100^2)*p[2]
)
length(
rep(
c(1,0),
spam
)
)
length(
rep(
c(T,F),
spam
)
)
spam <- c(
(100^2)*(1-p[2]),
(100^2)*p[2]
)
length(
rep(
c(1,0),
spam
)
)
sum(spam)
length(
rep(
c(1,0),
spam
)
)
#Colors proportions based on Voss, A., Rothermund, K., & Brandtstädter, J. (2008).
#The paper proposes 3 color proportions (45%, 47% and 49%), we add two more levels
p <- seq(.45,.495, length.out =5)
spam <- c(
(100^2)*(1-p[2]),
(100^2)*p[2]
)
length(
rep(
c(1,0),
spam
)
)
spam
trunc(spam)
p
#Colors proportions based on Voss, A., Rothermund, K., & Brandtstädter, J. (2008).
#The paper proposes 3 color proportions (45%, 47% and 49%), we add two more levels
p <- trunc(seq(.45,.495, length.out =5))
?trunc
#Colors proportions based on Voss, A., Rothermund, K., & Brandtstädter, J. (2008).
#The paper proposes 3 color proportions (45%, 47% and 49%), we add two more levels
p <- signif(seq(.45,.495, length.out =5),3)
spam <- c(
(100^2)*(1-p[2]),
(100^2)*p[2]
)
length(
rep(
c(1,0),
spam
)
)
spam
#Colors proportions based on Voss, A., Rothermund, K., & Brandtstädter, J. (2008).
#The paper proposes 3 color proportions (45%, 47% and 49%), we add two more levels
p <- signif(seq(.45,.495, length.out =5),4)
spam <- c(
(100^2)*(1-p[2]),
(100^2)*p[2]
)
length(
rep(
c(1,0),
spam
)
)
spam
sum(spam)
p[2]
p[2]
rep(1, spam[1])
length(rep(1, spam[1]))
length(rep(0, spam[2]))
round(spam[1])
length(rep(1, round(spam[1])))
length(rep(0, spam[2]))
length(
rep(
c(1,0),
round(spam)
)
)
#Colors proportions based on Voss, A., Rothermund, K., & Brandtstädter, J. (2008).
#The paper proposes 3 color proportions (45%, 47% and 49%), we add two more levels
p <- signif(seq(.45,.495, length.out =5),4)
#Matrix size (100x100) gives the number of individual colored cells in the stimulus
stim_q <- 100^2
#Colors proportions based on Voss, A., Rothermund, K., & Brandtstädter, J. (2008).
#The paper proposes 3 color proportions (45%, 47% and 49%), we add two more levels
p <- signif(seq(.45,.495, length.out =5),4)
shuffled_vectors_fun <- function(x, vector_length = stim_q){
#The function creates a vector with length vector_length consisting of a repetition of 1s and 0s with the proportion of 1s given by the argument
#x, then it shuffles the vector using the sample function
#Takes two arguments
##x = a proportion (from 0 to 1) corresponding to the amount of 1s in the resulting vector
##vector_length = an integer with the length of the resulting vector, it defaults to the object stim_q
sample( #Shuffle the repeated vector
rep( #Repeat a vector of 1 and 0 over 100^2 times
c(1,0), #vector of the integers used to populate the vectors
round(#We round the numbers to avoid floating point precision errors
c(#vector of the absolute number of 1s and 0s to populate the vectors
vector_length*(1-x),
vector_length*x)
)
),
vector_length
)
}
##Training stimulus
#Create length(p) vectors of length 100^2 with shuffled 1s and 0s according to the proportions of object p
shuffled_vectors <- sapply(
p, #Iterate over the three color proportions
#Function to generate vectors of length 100^2 with 1s and 0s according to each proportion x (from p) and shuffle it
shuffled_vectors_fun
)
#Transform the vectors in shuffled_vectors to a 3d array with dimensions 100x100xlength(p), the 100x100 are given by stim_q
training_stimuli <- array(
shuffled_vectors,
dim = c(100,100,length(p))
)
#Create length(p) * 100 vectors of length 100^2 with shuffled 1s and 0s, with a different proportion p for each 100 elements (eg. the first 100 vectors have proportion 0.45, etc)
experimental_vectors <- sapply(
rep( #Generate a vector of proportions containing 1000 repeated values for each proportion in p
p,
each = 100
),
shuffled_vectors_fun
)
#Transformed the shuffled vectors into a 3d array
experimental_array <- array(
experimental_vectors,
dim = c(100,100,length(p)*100)
)
#Save the results
saveRDS(training_stimuli,  file = 'training_stimulus.rds', version = 2)
saveRDS(experimental_array, file = 'experimental_stimulus.rds', version = 2)
